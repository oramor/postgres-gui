namespace Lib.GuiCommander
{
    /// <summary>
    /// Один из наиболее абстрактных интерфейсов. Определяет методы, которые
    /// должны быть реализованы классом, ответственным за управление записью (record).
    /// Под доменом записей понимается любой объект данных, у которого
    /// имеется числовой идентификатор. При этом не важно, что является источником
    /// данных для записей этого домена: БД, локальный файл или текущее состояние
    /// приложения. Так же не имеет значения вид класса, который реализует этот интерфейс.
    /// Это может быть System.Windors.Forms.Form, либо отдельная вьюмодель
    /// в контексте WPF-приложения. Если говорить в терминах реляционной модели,
    /// то RecordDomain — это таблица.
    /// </summary>
    public interface IRecordDomain
    {
        /// <summary>
        /// Любая сущность обязана иметь имя, которое одновременно является
        /// ее идентификатром. Имя неизменно (поэтому init).
        /// </summary>
        string Name { get; init; }
        /// <summary>
        /// Возвращает объект по его идентификатору
        /// </summary>
        object? GetOne(int id);
        /// <summary>
        /// Возвращает коллекцию объектов
        /// </summary>
        ICollection<IRecord> GetList(object? filter);
        /// <summary>
        /// Возвращает идентификатор созданного экземпляря сущности
        /// </summary>
        int Create();
        /// <summary>
        /// Возвращает версию после обновления
        /// </summary>
        int Update();
        void Delete();
    }
}
